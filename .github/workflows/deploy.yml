name: deploy

on:
  pull_request:
    branches:
      - main

jobs:
  unit-testing:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Create env file
        run: |
          echo PG_URI=${{ secrets.PG_URI }} >> .env
          echo PORT=8080 >> .env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          echo PROJECT_ROOT=/usr/src/app >> .env
          echo GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} >> .env
          echo GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} >> .env
          echo SESSION_SECRET=${{ secrets.SESSION_SECRET }} >> .env

      - name: run test
        run: docker-compose -f docker-compose-test.yml up --abort-on-container-exit

  deploy:
    needs:
      - unit-testing
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Create env file
        run: |
          echo PG_URI=${{ secrets.PG_URI }} >> .env
          echo PORT=8080 >> .env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          echo PROJECT_ROOT=/usr/src/app >> .env
          echo GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} >> .env
          echo GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} >> .env
          echo SESSION_SECRET=${{ secrets.SESSION_SECRET }} >> .env

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build, Tag, and Push Docker image to ECR
        run: |
          docker buildx build --platform linux/amd64 -t ${{ secrets.ECR_REGISTRY }}/reacraft:latest .
          docker push ${{ secrets.ECR_REGISTRY }}/reacraft:latest
